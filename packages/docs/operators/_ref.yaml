# Copyright 2020-2021 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/operators.yaml.njk
  transformer: templates/operatorsMethodTransformer.js
  vars:
    pageId: _ref
    pageTitle: _ref
    filePath: operators/_ref.yaml
    env: Build Only
    types: |
      ```
      (path: string): any
      (arguments: {
        path: string,
        vars?: object,
        transformer?: string,
      }): any
      ```
    description: |
      The `_ref` operator can be used to reference a configuration file, in order to split the Lowdefy configuration into multiple files. More information on references and the Lowdefy configuration schema can be found [here](/lowdefy-schema).

      > The `_ref` operator is a build time operator: it is evaluated when the app configuration is being built. This means it is not evaluated dynamically as the app is running, and can be used anywhere in the configuration as long as the resulting configuration files are valid YAML.

      The `_ref` operator requires a file path to the file to be referenced, relative to the root directory of the project.

      If this file is a YAML or JSON file, and has file extension `.yaml`, `.yml`, or `.json`, the file is parsed as YAML/JSON, and the parsed result is included in the configuration.

      If this file is a Nunjucks template file, with file extension `.njk`, the file is parsed as a Nunjucks template, using any variables provided in the `vars` argument. If the file extension is `.yaml.njk`, `.yml.njk` or `.json.njk`, the template output is also parsed as YAML/JSON.

      If the file is not parsed (for example has an extension like `.txt`, `.md`, or `.html`), the file contents are included in the configuration as a string.

      ###### Variables

      Variables defined in the `vars` argument can be accessed in the referenced file using the [`_var`](/_var), and as template variables in Nunjucks files.

      ###### Transformer

      A transformer is a JavaScript function that receives the result of the `_ref` operator, and its `vars`. The value returned by this function will be included in the configuration as the final result of the `_ref` operator. The `transformer` argument should be the file path (relative to the root of the project) to a JavaScript file that exports a transformer function. For example:

      ```js
      // transformer.js
      function transformer(input, vars) {
        // Do something with input
        return result
      }
      module.exports = transformer;
      ```

      ###### Evaluating JavaScript

      JavaScript can be evaluated during build time by referencing a JavaScript file to the `eval` argument. The result of `_ref` operator will be the exported result of the evaluated JavaScript using [`eval`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval). If the exported result is a function, `function.toString()` will be returned, useful for loading `code` for the [`_js`](/_js) operator. The `eval` argument should be the file path (relative to the root of the project) to a JavaScript file that exports the a JSON serializable result or function when evaluated.

      For example:
      ```js
      // fooHelpers/fooFn.js
      function fooFn(value) {
        return { foo: value };
      }
      module.exports = fooFn(10);
      ```
      This will evaluate to an object: `{ foo: 10 }`.

      And when returning a function will provide the exported function, for example:
      ```js
      // fooHelpers/makePrimes.js
      function a() {
        // some other js function
      };
      function fooFn(value) {
        return { foo: value };
      }
      module.exports = fooFn;
      ```
      This will evaluate to the exported function as a string:
      ```yaml
      "function fooFn(value) {
        return { foo: value };
      }"
      ```
    arguments: |
      ###### string
      The file path to the referenced file, from the root of the project directory.

      ###### object
        - `path: string`: __Required__ - The file path to the referenced file, from the root of the project directory.
        - `vars: object`: An object to be used as variables for the `_var` operator in the referenced file, and as template variables in Nunjucks template files.
        - `transformer: string`: The file path to a JavaScript file, from the root of the project directory, that exports a transformer function.
        - `eval: string`: The file path to a JavaScript file which to evaluate, from the root of the project directory.
    examples: |
      ###### Reference pages:
      ```yaml
      # lowdefy.yaml
      lowdefy: '3.18.1'
      pages:
        - _ref: pages/page1.yaml
        - _ref: pages/page2.yaml
      ```
      ```yaml
      # pages/page1.yaml
      id: page1
      type: PageHeaderMenu
      blocks:
        # ...
      ```
      ```yaml
      # pages/page2.yaml
      id: page2
      type: PageHeaderMenu
      blocks:
        # ...
      ```
      Returns:
      ```
      lowdefy: '3.18.1'
      pages:
        - id: page1
          type: PageHeaderMenu
          blocks:
            # ...
        - id: page2
          type: PageHeaderMenu
          blocks:
            # ...
      ```

      ###### Using a standardized input label template:
      ```yaml
      blocks:
        - id: name
          type: TextInput
          properties:
            label:
              _ref:
                path: label.yaml
                vars:
                  title: Name
                  description: Your name and surname.
        - id: age
          type: NumberInput
          properties:
            label:
              _ref:
                path: label.yaml
                vars:
                  title: Age
                  description: Your age.
      ```
      ```yaml
      # label.yaml
      title:
        _var: title
      extra:
        _var: description
      span: 8
      colon: false
      extraStyle:
        color: '#546358'
      ```
      Returns:
      ```yaml
      blocks:
        - id: name
          type: TextInput
          properties:
            label:
              title: Name
              extra: Your name and surname.
              span: 8
              colon: false
              extraStyle:
                color: '#546358'
        - id: age
          type: NumberInput
          properties:
            label:
              title: Age
              extra: Your age.
              span: 8
              colon: false
              extraStyle:
                color: '#546358'
      ```
